
Live Jamming Protocol (LJP):                  

UDP packet description :

----------------------------------------------
| id | type | datas | version |\\| jam datas |
----------------------------------------------
<------------YAML------------>

type :  - session
	- chat
	- informations
	- jam


Yaml format :

{id: user_id, type : [packet_type], datas: [packet_datas], version: client_version}

Connection Steps :

 Step 1: Client requests session with server:
{
 type : 
		session : session_initialization
 datas :
 		login : user_login
		password : user_password
 version : client_version
}


 Step 2: Server informs client that session has been created:
{
 id : user_id
 type : 
		session : session_created
 datas :
		profil : user_profil
		status : user_status
		musician : user_instrument
		friend_list : user_friends
		ping_estimation : user_ping
 version : server_version
}   


  Step 2 (alt): Server informs client that session has NOT beed created:
{
 type : 
		session : session_failed
 datas :
		session_information :
 version : server_version
}   

  Step 3 : Client disconnects from server :
{
 id : user_id
 type : 
		session : session_disconnected
 version : server_version
}   


Various Step :

 Change status :
{
 id : user_id
 type : 
		informations : status_changed
 datas :
		status : user_status
 version : client_version
}  

 Get user profil :
{
 id : user_id
 type : 
		informations : get_user_profil
 datas :
		user : selected_user
 version : client_version
} 

 Send channel message :
{
 id : user_id
 type : 
		chat : send_channel_message
 datas :
		channel : selected_channel
		message : user_message
 version : client_version
}  

 Send private message :
{
 id : user_id
 type : 
		chat : send_private_message
 datas :
		user : selected_user
		message : user_message
 version : client_version
}  

 Receive private message :
{
 id : user_id
 type :
		chat : receive_private_message
 datas :
		sender : sender_user
		message : sender_message
 version : server_version
}  

 Receive channel message :
{
 id : user_id
 type : 
		chat : receive_channel_message
 datas :
		channel : selected_channel
		message : sender_message
 version : server_version
}  

 Evaluate latency :
{
 id : user_id
 type : 
		informations : evaluate_latency
 datas :
		latency : user_latency
 version : client_version
}  

 Create room :
{
 id : user_id
 type : 
		jam : create
 datas :
		room_name : name
		room_settings : settings
		room_participants : participants
 version : client_version
}  

 Leave room :
{
 id : user_id
 type : 
		jam : end
 datas :
		room_name : name
		room_participants : participants
 version : client_version
}  

 Send invitation to room :
{
 id : user_id
 type : 
		jam : invite
 datas :
		room_name : name
		room_invited : user
		room_invitation_message : message
 version : client_version
}  

 Receive invitation to a room :
{
 id : user_id
 type : 
		jam : invite
 datas :
		room_name : name
		room_host : user
		room_invitation_message : message
 version : server_version
}  

 Send kick from room :
{
 id : user_id
 type : 
		jam : kick
 datas :
		room_name : name
		room_kicked : user
		room_kick_reason : message
 version : client_version
}  

 Receive kick from a room :
{
 id : user_id
 type : 
		jam : kick
 datas :
		room_name : name
		room_host : user
		room_kick_reason : message
 version : server_version
}  

 Room settings :
{
 id : user_id
 type : 
		jam : settings
 datas :
		room_name : name
		room_settings : settings
 version : client_version
}  

 Start jam :
{
 id : user_id
 type : 
		jam : start
 datas :
		room_name : name
 version : client_version
}  + JAM_DATAS

 Record jam :
{
 id : user_id
 type : 
		jam : record
 datas :
		room_name : name
 version : client_version
}  + JAM_DATAS

 Stop jam :
{
 id : user_id
 type : 
		jam : stop
 datas :
		room_name : name
 version : client_version
}  + JAM_DATAS

	
		

